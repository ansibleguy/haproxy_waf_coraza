---

- name: "HAProxy WAF | Apps | {{ waf_app_name }} | Disable Rules"
  ansible.builtin.command: |
    python3 {{ WAF_HC.path.rule_script }} -s disable -f {{ rule_file }} -i {{ rule_id }}
    {% if ansible_check_mode %}-c true{% endif %}
  register: waf_app_rule_dis
  changed_when: "'disabled' in waf_app_rule_dis.stdout"
  when:
    - not rule_file_cnf | is_boolean
    - rule_file_cnf | length > 0
    - rule_cnf | is_boolean
    - not rule_cnf | bool
  vars:
    rule_id: "{{ item.key }}"
    rule_cnf: "{{ item.value }}"
  with_dict: "{{ rule_file_cnf }}"
  check_mode: false
  notify: ['WAF-restart', 'Check-failed']

- name: "HAProxy WAF | Apps | {{ waf_app_name }} | Enable Rules"
  ansible.builtin.command: |
    python3 {{ WAF_HC.path.rule_script }} -s enable -f {{ rule_file }} -i {{ rule_id }}
    {% if ansible_check_mode %}-c true{% endif %}
  register: waf_app_rule_en
  changed_when: "'enabled' in waf_app_rule_en.stdout"
  when:
    - not rule_file_cnf | is_boolean
    - rule_file_cnf | length > 0
    - rule_cnf | is_boolean
    - rule_cnf | bool
  vars:
    rule_id: "{{ item.key }}"
    rule_cnf: "{{ item.value }}"
  with_dict: "{{ rule_file_cnf }}"
  check_mode: false
  notify: ['WAF-restart', 'Check-failed']

- name: "HAProxy WAF | Apps | {{ waf_app_name }} | Replace Rules"
  ansible.builtin.command: |
    python3 {{ WAF_HC.path.rule_script }} -s replace -f {{ rule_file }} -i {{ rule_id }} -r {{ rule_cnf }}
    {% if ansible_check_mode %}-c true{% endif %}
  register: waf_app_rule_repl
  changed_when: "'replaced' in waf_app_rule_repl.stdout"
  when:
    - not rule_file_cnf | is_boolean
    - rule_file_cnf | length > 0
    - not rule_cnf | is_boolean
  vars:
    rule_id: "{{ item.key }}"
    rule_cnf: "{{ item.value }}"
  with_dict: "{{ rule_file_cnf }}"
  check_mode: false
  notify: ['WAF-restart', 'Check-failed']
