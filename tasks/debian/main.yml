---

- name: HAProxy WAF | Creating service user
  ansible.builtin.user:
    name: "{{ WAF_HC.user }}"
    shell: '/usr/sbin/nologin'
    comment: 'HAProxy WAF Serviceuser'

- name: HAProxy WAF | Create directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: 'root'
    group: "{{ WAF_HC.user }}"
    mode: 0750
  loop:
    - "{{ WAF_HC.path.cnf }}"
    - "{{ WAF_HC.path.cnf }}/{{ WAF_HC.path.dir.cnf_rules }}/_tmpl"

- name: HAProxy WAF | HAProxy Config
  ansible.builtin.template:
    src: "templates/etc/haproxy/{{ item.s }}"
    dest: "{{ item.d }}"
    mode: 0644
  with_items:
    - {s: 'waf-coraza.cfg.j2', d: "{{ WAF_CONFIG.haproxy_config.backend }}"}
    - {s: 'waf-coraza-spoe.cfg.j2', d: "{{ WAF_CONFIG.haproxy_config.spoe }}"}
  tags: [config, apps]

- name: HAProxy WAF | SPOA Config
  ansible.builtin.template:
    src: 'templates/etc/coraza/spoa.yml.j2'
    dest: "{{ WAF_HC.path.cnf }}/{{ WAF_HC.path.file.cnf_spoa }}"
    mode: 0640
    owner: 'root'
    group: "{{ WAF_HC.user }}"
  notify: ['waf-restart', 'check-failed']
  tags: [config, apps]

- name: HAProxy WAF | Apps
  ansible.builtin.include_tasks: debian/app.yml
  vars:
    waf_app: "{{ defaults_app | combine(waf_app_user, recursive=true) }}"
    waf_app_name: "{{ waf_app.name | safe_key }}"
    waf_app_rules_dir: "{{ WAF_HC.path.cnf }}/{{ WAF_HC.path.dir.cnf_rules }}/{{ waf_app_name }}/{{ waf_app.ruleset_version }}"
    waf_app_rules_default_dir: "{{ WAF_HC.path.cnf }}/{{ WAF_HC.path.dir.cnf_rules }}/_tmpl/{{ waf_app.ruleset_version }}"
  loop_control:
    loop_var: waf_app_user
  loop: "{{ WAF_CONFIG.apps }}"
  no_log: true
  tags: [config, rules, apps]
  args:
    apply:
      tags: [apps]

- name: HAProxy WAF | Install
  ansible.builtin.import_tasks: debian/install.yml
  tags: [install]

- name: HAProxy WAF | Logging
  ansible.builtin.import_tasks: debian/logging.yml
  tags: [logs]
